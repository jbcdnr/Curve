// Generated by CoffeeScript 1.7.1
(function() {
  var ANGLE, BORDER, Directions, HEIGHT, PERIOD, Player, SIZE, SPEED, WIDTH, clearCanvas, context, drawCirc, game, refresh, startGame;

  WIDTH = 600;

  HEIGHT = 600;

  ANGLE = Math.PI / 30;

  SPEED = 5;

  SIZE = 4;

  PERIOD = 50;

  BORDER = 5;

  context = null;

  window.onload = function() {
    context = document.getElementById('canvas').getContext('2d');
    return startGame();
  };

  drawCirc = function(pos, radius, color) {
    context.beginPath();
    context.arc(pos.e(1), pos.e(2), radius, 0, 2 * Math.PI, false);
    context.fillStyle = color;
    return context.fill();
  };

  clearCanvas = function() {
    return context.clearRect(0, 0, WIDTH, HEIGHT);
  };

  Directions = {
    Left: -1,
    None: 0,
    Right: 1
  };

  Player = (function() {
    Player.id = 0;

    function Player(left, right, color) {
      this.left = left;
      this.right = right;
      this.color = color;
      this.isAlive = true;
      this.position = Vector.create([0, 0]);
      this.speed = Vector.create([1, 0]);
      this.dir = Directions.None;
      this.dirs = [
        {
          left: false,
          right: false
        }
      ];
      this.id = Player.id++;
    }

    Player.prototype.init = function() {
      this.position = Vector.create([Math.random() * WIDTH, Math.random() * HEIGHT]);
      this.speed = Vector.create([Math.random() - 0.5, Math.random() - 0.5]).toUnitVector();
      document.addEventListener("keydown", (function(_this) {
        return function(e) {
          if (String.fromCharCode(e.keyCode) === _this.left) {
            _this.dirs.left = true;
          }
          if (String.fromCharCode(e.keyCode) === _this.right) {
            _this.dirs.right = true;
          }
          return _this.dir = _this.dirs.left && !_this.dirs.right ? Directions.Left : _this.dirs.right && !_this.dirs.left ? Directions.Right : Directions.None;
        };
      })(this));
      return document.addEventListener("keyup", (function(_this) {
        return function(e) {
          if (String.fromCharCode(e.keyCode) === _this.left) {
            _this.dirs.left = false;
          }
          if (String.fromCharCode(e.keyCode) === _this.right) {
            _this.dirs.right = false;
          }
          return _this.dir = _this.dirs.left && !_this.dirs.right ? Directions.Left : _this.dirs.right && !_this.dirs.left ? Directions.Right : Directions.None;
        };
      })(this));
    };

    Player.prototype.move = function() {
      if (this.isAlive) {
        if (this.dir !== Directions.None) {
          this.speed = this.speed.rotate(this.dir * ANGLE, Vector.create([0, 0]));
        }
        this.position = this.position.add(this.speed.multiply(SPEED));
      }
      return this.isAlive = (game.field.filter((function(_this) {
        return function(point, i) {
          return (i < game.field.length - 10 || point.color !== _this.color) && point.pos.distanceFrom(_this.position) < 2 * SIZE;
        };
      })(this))).length === 0 && this.position.e(1) > BORDER && this.position.e(2) > BORDER && this.position.e(1) < WIDTH - BORDER && this.position.e(2) < HEIGHT - BORDER;
    };

    return Player;

  })();

  game = {
    players: [new Player('Q', 'W', '#3498db'), new Player('O', 'P', '#c0392b')],
    field: []
  };

  refresh = function() {
    var player, point, _i, _j, _len, _len1, _ref, _ref1;
    _ref = game.players;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      player = _ref[_i];
      if (!player.isAlive) {
        continue;
      }
      player.move();
      game.field.push({
        pos: player.position,
        color: player.color
      });
    }
    clearCanvas();
    _ref1 = game.field;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      point = _ref1[_j];
      drawCirc(point.pos, SIZE, point.color, context);
    }
    return setTimeout(refresh, PERIOD);
  };

  startGame = function() {
    var player, _i, _len, _ref;
    _ref = game.players;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      player = _ref[_i];
      player.init();
    }
    return setTimeout(refresh, PERIOD);
  };

}).call(this);
